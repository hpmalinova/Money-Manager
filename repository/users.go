package repository

import (
	"database/sql"
	"fmt"
	_ "github.com/go-sql-driver/mysql"
	"github.com/hpmalinova/Money-Manager/model"
	"log"
)

type UserRepoMysql struct {
	db *sql.DB
}

func NewUserRepoMysql(user, password, dbname string) *UserRepoMysql {
	connectionString := fmt.Sprintf("%s:%s@/%s", user, password, dbname)
	repo := &UserRepoMysql{}
	var err error
	repo.db, err = sql.Open("mysql", connectionString)
	if err != nil {
		log.Fatal(err)
	}
	return repo
}

func (u *UserRepoMysql) Find(start, count int) ([]model.User, error) {
	statement := "SELECT id, username, password FROM users LIMIT ? OFFSET ?"
	rows, err := u.db.Query(statement, count, start)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	users := []model.User{}
	for rows.Next() {
		var user model.User
		err := rows.Scan(&user.ID, &user.Username, &user.Password)
		if err != nil {
			return nil, err
		}
		users = append(users, user)
	}
	rows.Close()
	if err = rows.Err(); err != nil {
		return nil, err
	}
	return users, nil
}

//FindById return users by user ID or error otherwise
func (u *UserRepoMysql) FindByID(id int) (*model.User, error) {
	user := &model.User{}
	statement := "SELECT id, username, password FROM users WHERE id= ?"
	err := u.db.QueryRow(statement, id).Scan(&user.ID, &user.Username, &user.Password)
	if err != nil {
		return nil, err
	}
	return user, nil
}

func (u *UserRepoMysql) FindNamesByIDs(ids []int) ([]string, error) {
	usernames := []string{}

	for _, id := range ids {
		statement := "SELECT username FROM users WHERE id= ?"
		var username string
		err := u.db.QueryRow(statement, id).Scan(&username)
		if err != nil {
			fmt.Println(err) //todo log fatal?
		}
		usernames = append(usernames, username)
	}

	return usernames, nil
}

func (u *UserRepoMysql) FindByUsername(username string) (*model.User, error) {
	user := &model.User{}
	statement := "SELECT id, username, password FROM users WHERE username= ?"
	err := u.db.QueryRow(statement, username).Scan(&user.ID, &user.Username, &user.Password)
	if err != nil {
		return nil, err
	}
	return user, nil
}

//Create creates and returns new user with autogenerated ID
func (u *UserRepoMysql) Create(user *model.User) (*model.User, error) {
	statement := "INSERT INTO users(username, password) VALUES(?, ?)"
	result, err := u.db.Exec(statement, user.Username, user.Password)
	if err != nil {
		return nil, err
	}
	id, err := result.LastInsertId()
	user.ID = int(id)

	if err != nil {
		return nil, err
	}
	return user, nil
}
